repositories {
    google()
    mavenCentral()
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'signing'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.vanniktech.maven.publish'


android {
    namespace "mobi.lab.labencryptedstorage"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        compileSdkVersion libs.versions.android.sdk.compile.get()
        targetSdkVersion libs.versions.android.sdk.target.get()
        minSdkVersion libs.versions.android.sdk.min.get()
        version "$versionMajor.$versionMinor.$versionPatch"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${version}-${variant.buildType.name}.aar"
            }
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            // Always show output even if the result has not changed
            outputs.upToDateWhen { false }
            // Show standard stream outputs if used
            showStandardStreams = true
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"

        // For Kotlin API strict mode.
        // In the future we should be able to do it easier.
        // When https://youtrack.jetbrains.com/issue/KT-37652 is fixed
        // then we can use the module annotation to enable this instead of the compiler flag.
        freeCompilerArgs += '-Xexplicit-api=strict'
    }
}

dependencies {
    implementation libs.kotlin
    implementation libs.gson
    implementation libs.androidx.security.crypto

    testImplementation libs.test.junit
    testImplementation libs.test.junit.kotlin

    androidTestImplementation libs.test.junit
    androidTestImplementation libs.test.junit.kotlin
    androidTestImplementation libs.test.androidx.junit // Junit runner
    androidTestImplementation libs.test.androidx.testrunner
    androidTestImplementation libs.test.espresso.core
    androidTestImplementation libs.test.mockito.android
    androidTestImplementation libs.test.mockito.kotlin
}

mavenPublishing {
    // the first parameter represents which variant is published
    // the second whether to publish a sources jar
    // the third whether to publish a javadoc jar
    //configure(new AndroidSingleVariantLibrary("release", true, true))

    // false - manual release required via https://central.sonatype.com/publishing/deployments
    publishToMavenCentral(false)

    signAllPublications()

    coordinates("mobi.lab.labencryptedstorage", "labencryptedstorage", "$versionMajor.$versionMinor.$versionPatch")

    pom {
        name = "Lab Encrypted Storage library."
        description = "Encrypted key-value storage library for Android. Uses Google\'s EncryptedSharedPreferences and SharedPreferences as the backing storage in synchronous mode."
        inceptionYear = "2022"
        url = "https://github.com/LabMobi/LabEncryptedStorage"
        licenses {
            license {
                name = "The MIT License"
                url = "https://opensource.org/licenses/mit-license.php"
                distribution = "https://opensource.org/licenses/mit-license.php"
            }
        }
        developers {
            developer {
                id = "android@lab.mobi"
                name = "Mobi Lab"
                url = "https://lab.mobi"
            }
        }
        scm {
            connection = 'https://github.com/LabMobi/LabEncryptedStorage.git'
            developerConnection = 'https://github.com/LabMobi/LabEncryptedStorage.git'
            url = 'https://github.com/LabMobi/LabEncryptedStorage'
        }
    }
}

def GROUP_CI_BUILD_TASKS = 'Build'
tasks.register('buildAll') {
    group = GROUP_CI_BUILD_TASKS
    description = "Build the debug version of components lib"
    dependsOn 'clean', ':sample:build', 'build'
}


buildAll.group = GROUP_CI_BUILD_TASKS
buildAll.description = 'Build the library and the sample application'
build.mustRunAfter clean

tasks.register('buildAndPublishRelease') {
    group = "Publish"
    description = "Build the library release version and publish it"
    dependsOn "buildAll", "checkCode", "publishToMavenCentral"
}

publishToMavenCentral.mustRunAfter tasks.named('buildAll').get()
publishToMavenCentral.mustRunAfter tasks.checkCode

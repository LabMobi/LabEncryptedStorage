repositories {
    google()
    mavenCentral()
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'


android {
    namespace "mobi.lab.labencryptedstorage"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        compileSdkVersion libs.versions.android.sdk.compile.get()
        targetSdkVersion libs.versions.android.sdk.target.get()
        minSdkVersion libs.versions.android.sdk.min.get()
        version "$versionMajor.$versionMinor.$versionPatch"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${version}-${variant.buildType.name}.aar"
            }
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            // Always show output even if the result has not changed
            outputs.upToDateWhen { false }
            // Show standard stream outputs if used
            showStandardStreams = true
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"

        // For Kotlin API strict mode.
        // In the future we should be able to do it easier.
        // When https://youtrack.jetbrains.com/issue/KT-37652 is fixed
        // then we can use the module annotation to enable this instead of the compiler flag.
        freeCompilerArgs += '-Xexplicit-api=strict'
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            // withJavadocJar()
        }
    }
}

dependencies {
    implementation libs.kotlin
    implementation libs.gson
    implementation libs.androidx.security.crypto

    testImplementation libs.test.junit
    testImplementation libs.test.junit.kotlin

    androidTestImplementation libs.test.junit
    androidTestImplementation libs.test.junit.kotlin
    androidTestImplementation libs.test.androidx.junit // Junit runner
    androidTestImplementation libs.test.androidx.testrunner
    androidTestImplementation libs.test.espresso.core
    androidTestImplementation libs.test.mockito.android
    androidTestImplementation libs.test.mockito.kotlin
}

def GROUP_CI_BUILD_TASKS = 'Build'
task buildAll(dependsOn: [
        'clean',
        ':sample:build',
        'build'
])
buildAll.group = GROUP_CI_BUILD_TASKS
buildAll.description = 'Build the library and the sample application'
build.mustRunAfter clean

task buildAndPublishRelease(dependsOn: ['buildAll', 'publish'])
buildAndPublishRelease.group = GROUP_CI_BUILD_TASKS
buildAndPublishRelease.description = "Build the library release version and publish it"

publish.mustRunAfter tasks.findByPath('buildAll')

Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('publish.properties').newDataInputStream())
} catch (Exception ignored) {
    println "publish.properties missing"
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = 'mobi.lab.labencryptedstorage'
                artifactId = 'labencryptedstorage'
                from components.release
                pom {
                    packaging = 'aar'
                    name = 'Lab Encrypted Storage library.'
                    description = 'Encrypted key-value storage library for Android. Uses Google\'s EncryptedSharedPreferences and SharedPreferences as the backing storage in synchronous mode.'
                    url = 'https://github.com/LabMobi/LabEncryptedStorage'

                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            name = properties.getProperty("publish_developer_name")
                            name = properties.getProperty("publish_developer_name")
                            email = properties.getProperty("publish_developer_email")
                            organization = properties.getProperty("publish_developer_organization")
                            organizationUrl = properties.getProperty("publish_developer_organization_url")
                        }
                    }
                    scm {
                        connection = 'https://github.com/LabMobi/LabEncryptedStorage.git'
                        developerConnection = 'https://github.com/LabMobi/LabEncryptedStorage.git'
                        url = 'https://github.com/LabMobi/LabEncryptedStorage'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = properties.getProperty("publish_ossrh_username")
                    password = properties.getProperty("publish_ossrh_password")
                }
            }
        }
    }

    signing {
        def signingKey = properties.getProperty("signing_key")
        def signingPassword = properties.getProperty("signing_password")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}
